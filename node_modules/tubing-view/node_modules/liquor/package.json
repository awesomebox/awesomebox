{
  "name": "liquor",
  "description": "Templates, minus the code.",
  "author": {
    "name": "Christopher Jeffrey"
  },
  "version": "0.0.4",
  "main": "./lib/liquor.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/chjj/liquor.git"
  },
  "homepage": "https://github.com/chjj/liquor",
  "bugs": {
    "url": "https://github.com/chjj/liquor/issues"
  },
  "keywords": [
    "template",
    "html"
  ],
  "tags": [
    "template",
    "html"
  ],
  "readme": "# Liquor\n\nLiquor is a templating engine for node. It's very lightweight. It's essentially\nembedded javascript with some shorthand significant whitespace notation\navailable. This is to discourage use of raw code and make templates look nicer.\n\n## Usage\n\nBackticks are used for evaluation, while `#{}` is used for interpolation.\n\n``` html\n?:data\n  <table>\n    <tr>\n      @:col\n        <td>#{this}</td>\n    </tr>\n    @:data\n      <tr>\n        <td>#{this.color}</td>\n        <td>#{this.animal}</td>\n      </tr>\n  </table>\n\n!:data\n  <div>\n    ?:error\n      <p>Sorry, there was a problem: #{error}.</p>\n      <p>Please, try again!</p>\n    !:error\n      <p>Sorry, no error message.</p>\n  </div>\n```\n\nIs essentially shorthand for:\n\n``` html\n`if (typeof data !== 'undefined' && data) {`\n  <table>\n    <tr>\n      `each(col, function() {`\n        <td>#{this}</td>\n      `})`\n    </tr>\n    `each(data, function() {`\n      <tr>\n        <td>#{this.color}</td>\n        <td>#{this.animal}</td>\n      </tr>\n    `})`\n  </table>\n`} else {`\n  <div>\n    `if (typeof error !== 'undefined' && error) {`\n      <p>Sorry, there was a problem: #{error}.</p>\n      <p>Please, try again!</p>\n    `} else {`\n      <p>Sorry, no error message.</p>\n    `}`\n  </div>\n`}`\n```\n\n``` html\n`/* liquor also exposes an \"each\" helper function */`\n`/* it is the same one used internally for @ statements */`\n`if (messages)\n  each(messages, function(message, key) {`\n    <p>#{key}: #{message.content}</p>\n  `})`\n```\n\nIf you're worried about the notorious \"undefined\" problem with variables\nexpressed in raw evaluation of JS, you can access them as properties on a\nvariable called `$`, which exists within the context of a template, and holds\nall of the locals and helpers:\n\ne.g.\n\n``` html\n`if ($.messages) {` <p>#{JSON.stringify(messages)}</p> `}`\n```\n\n## License\n(c) Copyright 2011-2012, Christopher Jeffrey. See LICENSE for more info.\n",
  "readmeFilename": "README.md",
  "_id": "liquor@0.0.4",
  "dist": {
    "shasum": "c56f964db957c45411573da328e304b19d939483"
  },
  "_from": "liquor@",
  "_resolved": "https://registry.npmjs.org/liquor/-/liquor-0.0.4.tgz"
}
