{
  "name": "jazz",
  "description": "A simple template engine built specifically for nodejs.",
  "version": "0.0.18",
  "author": {
    "name": "Thomas Lee",
    "email": "thomas.lee@shinetech.com"
  },
  "keywords": [
    "template",
    "engine"
  ],
  "main": "./lib/jazz.js",
  "directories": {
    "lib": "./lib/jazz"
  },
  "scripts": {
    "test": "node test/all.js"
  },
  "engines": {
    "node": ">= 0.1.102"
  },
  "readme": "Jazz is a simple template engine built specifically for nodejs.\n\n# Usage\n\n    var jazz = require(\"jazz\");\n\n    var template = jazz.compile(\"my template source code {someVariable}\");\n    template.eval({\"someVariable\": \"lolmuffin\"}, function(data) { sys.puts(data); });\n\nThis example would output the following:\n\n    my template source code lolmuffin\n\n# Syntax\n\n## Printing variables\n\n    {someVariable}\n\nThis works for any type of expression, so the following should also work:\n\n    {users.fred}\n    {\"hello\"}\n    {45}\n    {a eq b}\n\n## Filter functions\n\nYou can call filter functions like so:\n\n    {someFilter(arg1, arg2)}\n\nFilter functions are statements, NOT expressions so they cannot be chained\nnor used in if/forelse/etc. tests. However, calls can be made on any type\nof expression -- e.g.\n\n    {math.sin(45)}\n\n### Implementing filter functions\n\nFilter functions may block so rather than returning the value you want\nrendered as you might in other frameworks, jazz passes in a callback to\nyour filter function that you then call to indicate that you have a\nresult. e.g. here we simulate a blocking operation using setTimeout().\n\n    // sum.jazz\n\n    {sum(5, 10)}\n\n    // sum.js\n\n    var jazz = require(\"jazz\");\n\n    var params = {\n        sum: function(arg1, arg2, cb) {\n            setTimeout(function() {\n                cb((arg1 + arg2).toString());\n            }, 2000);\n        }\n    }\n    jazz.compile(\"sum.jazz\").eval(params, function(output) { console.log(output); });\n\nNote that even though the execution of the callback is delayed, this example still\nworks.\n\n## Conditional Statements\n\nYou can check if a variable evaluates to a true value like so:\n\n    {if name}\n        Hello, {name}\n    {end}\n\nElse clauses are also supported:\n\n    {if name}\n        Hello, {name}\n    {else}\n        Hello, Captain Anonymous\n    {end}\n\nAs are else..if clauses:\n\n    {if firstName}\n        Hello, {firstName}\n    {elif lastName}\n        Hello, Mr. {lastName}\n    {else}\n        Hello, Captain Anonymous\n    {end}\n\nLimited logical expressions are also possible:\n\n    {if user.lastName and user.isVip}\n        Hello, Mr. {user.lastName}, my good man!\n    {end}\n\n    {if fred.tired or fred.bored}\n        Fred: \"Yawn!\"\n    {end}\n\n    {if not awake}\n        Zzz\n    {end}\n\neq & neq comparison operators are available for comparing two values:\n\n    {if config.feature eq \"enabled\"}\n        Feature is enabled!\n    {end}\n\n    {if status neq \"inactive\"}\n        Huzzah!\n    {end}\n\nYou can also group expressions using parentheses:\n\n    {if (a and b) or c}\n        ...\n    {end}\n\n## Looping over an array\n\n    {foreach item in someArray}\n        <p>{item}</p>\n    {end}\n\n\nThe value being iterated over can be any expression supporting\nan Array-like interface.\n\n",
  "readmeFilename": "README.md",
  "_id": "jazz@0.0.18",
  "dist": {
    "shasum": "2892ddbea6ea40d9269d3957e675bb92c1c89f44"
  },
  "_from": "jazz@",
  "_resolved": "https://registry.npmjs.org/jazz/-/jazz-0.0.18.tgz"
}
